diff --git a/examples/code.ts b/examples/dpop.ts
index 8cac616..f1fe5b5 100644
--- a/examples/code.ts
+++ b/examples/dpop.ts
@@ -10,6 +10,12 @@ let client_secret!: string
  * Server.
  */
 let redirect_uri!: string
+/**
+ * In order to take full advantage of DPoP you shall generate a random private key for every
+ * session. In the browser environment you shall use IndexedDB to persist the generated
+ * CryptoKeyPair.
+ */
+let DPoP!: CryptoKeyPair
 
 // End of prerequisites
 
@@ -64,6 +70,7 @@ let access_token: string
     params,
     redirect_uri,
     code_verifier,
+    { DPoP },
   )
 
   let challenges: oauth.WWWAuthenticateChallenge[] | undefined
@@ -77,6 +84,9 @@ let access_token: string
   const result = await oauth.processAuthorizationCodeOpenIDResponse(as, client, response)
   if (oauth.isOAuth2Error(result)) {
     console.log('error', result)
+    if (result.error === 'use_dpop_nonce') {
+      // the AS-signalled nonce is now cached, you should retry
+    }
     throw new Error() // Handle OAuth 2.0 response body error
   }
 
@@ -89,12 +99,15 @@ let access_token: string
 
 // fetch userinfo response
 {
-  const response = await oauth.userInfoRequest(as, client, access_token)
+  const response = await oauth.userInfoRequest(as, client, access_token, { DPoP })
 
   let challenges: oauth.WWWAuthenticateChallenge[] | undefined
   if ((challenges = oauth.parseWwwAuthenticateChallenges(response))) {
     for (const challenge of challenges) {
       console.log('challenge', challenge)
+      if (challenge.scheme === 'dpop' && challenge.parameters.error === 'use_dpop_nonce') {
+        // the AS-signalled nonce is now cached, you should retry
+      }
     }
     throw new Error() // Handle www-authenticate challenges as needed
   }
